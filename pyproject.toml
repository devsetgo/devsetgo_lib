# [build-system]
# requires = ["setuptools", "wheel"]
# build-backend = "setuptools.build_meta:__legacy__"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "devsetgo_lib"
version = "0.13.0"
requires-python = ">=3.9"
description = """
The devsetgo_lib is a comprehensive Python library that provides a collection of reusable functions designed to increase coding efficiency and enhance code reusability across multiple applications. This library aims to save developers time and effort by reducing the need for repetitive code, allowing defects to be addressed quickly and propagated across projects. The key features of devsetgo_lib include:

1. **File Operations**: Functions for reading, writing, and managing CSV, JSON, and text files, as well as directory handling operations.
2. **Calendar Utilities**: Functions for handling dates and times, including converting between month names and numbers.
3. **Pattern Matching**: Functions for matching and manipulating strings using regular expressions, helping to simplify text processing tasks.
4. **Logging**: Advanced logging configuration and management using the loguru library, allowing for customizable and robust logging solutions.
5. **FastAPI Endpoints**: Functions for creating and managing endpoints in FastAPI applications, including system health checks and HTTP response code generation.
6. **Async Database Handling**: Asynchronous CRUD operations for databases, with support for various databases including SQLite and PostgreSQL.
7. **Email Validation**: Functions to validate and handle email addresses, ensuring data integrity and correctness in applications.

The devsetgo_lib is designed to be easy to use and versatile, making it a valuable tool for any Python developer looking to improve their workflow and maintain high-quality code across their projects.
"""
keywords = ["python", "library", "reusable functions", "file operations", "calendar utilities", "pattern matching", "logging", "loguru", "FastAPI", "async database", "CRUD operations", "email validation", "development tools"]
readme = "README.md"
authors = [{ name = "Mike Ryan", email = "mikeryan56@gmail.com" }]
maintainers = [
    { name = "Mike Ryan", email = "mikeryan56@gmail.com" }, # Optional
]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Operating System :: POSIX",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
]

dependencies = [
    "loguru>=0.7.0",
    "packaging>=20.0",
    "email-validator>=2.1.1"
]
# loguru = ">=0.7.0"
# packaging = ">=20.0"



[project.urls]
    Homepage = "https://github.com/devsetgo/devsetgo_lib"
    Documentation = "https://devsetgo.github.io/devsetgo_lib/"
    Repository = "https://github.com/devsetgo/devsetgo_lib"


[project.optional-dependencies]
postgres = ["asyncpg>=0.21.0", "sqlalchemy>=2.0.10,<2.0.99"]
sqlite = ["aiosqlite>=0.17.0", "sqlalchemy>=2.0.10,<2.0.99"]
oracle = ["cx_Oracle>=8.0.0", "sqlalchemy>=2.0.10,<2.0.99"]
mssql = ["aioodbc>=0.4.1", "sqlalchemy>=2.0.10,<2.0.99"]
fastapi = ["fastapi>=0.100.0", "pydantic[email]>=2.0"]
all = [
    "asyncpg>=0.21.0",
    "sqlalchemy>=2.0.10,<2.0.99",
    "aiosqlite>=0.17.0",
    "cx_Oracle>=8.0.0",
    "fastapi>=0.100.0",
    "pydantic[email]>=2.0",
    "aioodbc>=0.4.1",
]

[project.scripts]
# Add your scripts here if any

[tool.hatch.build.targets.sdist]
include = [
  "/dsg_lib",
#   "/tests",
]
exclude = [
  "*.json",
  "pkg/_compat.py",
]

[tool.hatch.build.targets.wheel]
packages = ["dsg_lib"]

[tool.ruff]
# Same as Black.
line-length = 100
indent-width = 4
unsafe-fixes = true
# Assume Python 3.8
target-version = "py312"
src = ["dsg_lib", "test"]
exclude = ["unreleased/*","scripts/*","coverage.xml","coverage-badge.svg"] #,"examples/*"

[tool.ruff.lint]
select = [
    "C",  # mccabe rules
    "F",  # pyflakes rules
    "E",  # pycodestyle error rules
    "W",  # pycodestyle warning rules
    "B",  # flake8-bugbear rules
]
ignore = [
    "C901",  # max-complexity-10
    "E501",  # line-too-long
    "B017",
    "B904",
    "B008",
    "I",  # isort rules
]

[tool.ruff.format]
indent-style = "space"
quote-style = "single"



[tool.flake8]
max-line-length = 132
max-doc-length = 132
ignore = ["E302","E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "tests",
    "_venv",
    "htmlcov",
    "scripts",
    ".pytest_cache",
    ".vscode",
    "dist",
    "*.egg-info",
]

[tool.isort]
src_paths = ["dsg_lib", "test"]
force_single_line = false
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 100

[tool.coverage.run]
source = ["dsg_lib"]
omit = ["setup.py", "_venv/*", "tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__",
    "def main",
    "import_sqlalchemy",
]

[tool.pytest.ini_options]
# pythonpath = "dsg_lib"
norecursedirs = ["/tests"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--cov=./",
    "--cov-report=html",
    "--cov-report=xml",
    "-ra",
    "--strict-markers",
    "--tb=short",
    "-p pytester",
]
