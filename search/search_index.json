{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"CI/CD Pipeline: SonarCloud: DevSetGo Common Library \u00b6 NOTE: This is a beta version and not ready for use. A set of common functions wrapped into a package, so I don't have to write the same code over and over. Oh and it makes the code more reusable.... or something like that. Testing \u00b6 Test on Windows, Linux, and MacOS. Since I work in Windows and Linux and don't use MacOS, it is only tested via Github Actions for MacOS. Let me know if there is any issue. Library Functions \u00b6 file_functions CSV File Functions JSON File Functions Text File Functions Folder Functions Make Directory List Changes Directory List Calendar Functions Get Month Patterns Patter Between Logging logging configuration and interceptor","title":"Introduction"},{"location":"#devsetgo-common-library","text":"NOTE: This is a beta version and not ready for use. A set of common functions wrapped into a package, so I don't have to write the same code over and over. Oh and it makes the code more reusable.... or something like that.","title":"DevSetGo Common Library"},{"location":"#testing","text":"Test on Windows, Linux, and MacOS. Since I work in Windows and Linux and don't use MacOS, it is only tested via Github Actions for MacOS. Let me know if there is any issue.","title":"Testing"},{"location":"#library-functions","text":"file_functions CSV File Functions JSON File Functions Text File Functions Folder Functions Make Directory List Changes Directory List Calendar Functions Get Month Patterns Patter Between Logging logging configuration and interceptor","title":"Library Functions"},{"location":"calendar_functions/","text":"Calendar Functions \u00b6 TODO: \u00b6 none Get Month \u00b6 get_month(month: int) -> str: Pass in month integer value and get back string name of month (e.g. January, February, etc.). An integer value of 1-12 will work, any other values are invalid. In this example '0' and '13' will return \"Invalid month number\" as a response. from dsg_lib.calendar_functions import get_month month_list : list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 ] def calendar_check (): for i in month_list : month = get_month ( month = i ) print ( month )","title":"CalendarFunctions"},{"location":"calendar_functions/#calendar-functions","text":"","title":"Calendar Functions"},{"location":"calendar_functions/#todo","text":"none","title":"TODO:"},{"location":"calendar_functions/#get-month","text":"get_month(month: int) -> str: Pass in month integer value and get back string name of month (e.g. January, February, etc.). An integer value of 1-12 will work, any other values are invalid. In this example '0' and '13' will return \"Invalid month number\" as a response. from dsg_lib.calendar_functions import get_month month_list : list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 ] def calendar_check (): for i in month_list : month = get_month ( month = i ) print ( month )","title":"Get Month"},{"location":"contribute/","text":"Contributing \u00b6 Please feel to contribute to this project. Adding common functions is the intent and if you have one to add or improve an existing it is greatly appreciated. Ways to Contribute! \u00b6 Add or improve a function Add or improve documentation Add or improve Tests Report or fix a bug","title":"Contributing"},{"location":"contribute/#contributing","text":"Please feel to contribute to this project. Adding common functions is the intent and if you have one to add or improve an existing it is greatly appreciated.","title":"Contributing"},{"location":"contribute/#ways-to-contribute","text":"Add or improve a function Add or improve documentation Add or improve Tests Report or fix a bug","title":"Ways to Contribute!"},{"location":"file_functions/","text":"File Functions \u00b6 TODO: \u00b6 Create configuration for library to specify custom configurations Create Sample Data \u00b6 create_sample_files(filename: str, sample_size: int) Pass in file name without an extension (.json or .csv) and the sample size. The function will create a CSV and JSON file with the resulting files in /data/csv and /data/json folders from dsg_lib.file_functions import create_sample_files create_sample_files ( filename = \"test_file\" , sample_size = 1000 ) Create and open a CSV file \u00b6 Save CSV \u00b6 save_csv(file_name=\"your-file-name.csv\", data=example_list, root_folder=\"/data\", delimiter=\",\", quotechar='\"') Required fields are filename and data (must be a list). Optional Fields: root_folder : By default, the root_dir is \"data\" . The results will be in /data/csv folder, unless root_folder is defined. delimiter : Default is ',', must be a single printable character quotechar : Default is '\"', must be a single printable character \u00b6 Open CSV \u00b6 open_csv(filename: str, delimit: str = None) Required filed of filename and optional delimiter field (delimit=). Quoting is set to minimal and initial spaces will be skipped (removed). Output result is a dictionary/json object. from dsg_lib.file_functions import save_csv , open_csv data = [[ 'num' , '1' , '2' , '3' ], [ f ' { i } ' , \"a\" , \"b\" , \"c\" ]] save_csv ( filename = \"test.csv\" , datad = data , root_folder = None , delimiter = None , quotechar = None ) result = open_csv ( filename = \"test.csv\" ) print ( result ) Note: Data being sent is a list of lists. Each row in a csv is a list. So construct the data in a similar fashion as such. Otherwise the data will not persist as you expect. data = [] count = 1 header = [ \"column 1\" , \"column 2\" , \"column 3\" , \"column 4\" ] data . append ( header ) for _ in range ( 10 ): row = [ \"this\" , \"is\" , \"row\" , numb ] data . append ( row ) count += 1 Create and open a JSON file \u00b6 save_json(filename: str, data: list, root_folder: str = None) Required fields are filename and data (must be a list). Optional is the root_folder . By default, the root_dir is \"data\" . The results will be in /data/json folder, unless root_folder is defined. open_json(filename: str) Required filed of filename and optional delimiter field (delimit=). Quoting is set to minimal and initial spaces will be skipped (removed). from dsg_lib.file_functions import save_json , open_json json_data = { \"name\" : \"John\" , \"age\" : 30 , \"cars\" : [ \"Ford\" , \"BMW\" , \"Fiat\" ]} save_json ( filename = \"test.json\" , data = json_data , root_folder = \"data\" ) result = open_json ( filename = \"test.json\" ) print ( result ) Create and open a Text file \u00b6 save_text(filename: str, data: list, root_folder: str = None) Required fields are filename and data (must be a list). Optional is the root_folder . By default, the root_dir is \"data\" . The results will be in /data/text folder, unless root_folder is defined. open_text(filename: str) Required filed of filename and output is a string. Output result will be in /data/text folder. from dsg_lib.file_functions import save_text , open_text html = \"\"\" <!DOCTYPE html> <html> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html> \"\"\" file_functions . save_text ( filename = \"test.html\" , data = html ) result = open_text ( filename = \"test.json\" ) print ( result ) Delete File \u00b6 delete_file(file_name: str) Required fields are filename . Based on extension, the file will be removed. If the extension is other than .json or .csv, the file to removed will be removed from the data/text folder. from dsg_lib.file_functions import delete_file delete_file ( filename = \"test.html\" , data = html )","title":"FileFunctions"},{"location":"file_functions/#file-functions","text":"","title":"File Functions"},{"location":"file_functions/#todo","text":"Create configuration for library to specify custom configurations","title":"TODO:"},{"location":"file_functions/#create-sample-data","text":"create_sample_files(filename: str, sample_size: int) Pass in file name without an extension (.json or .csv) and the sample size. The function will create a CSV and JSON file with the resulting files in /data/csv and /data/json folders from dsg_lib.file_functions import create_sample_files create_sample_files ( filename = \"test_file\" , sample_size = 1000 )","title":"Create Sample Data"},{"location":"file_functions/#create-and-open-a-csv-file","text":"","title":"Create and open a CSV file"},{"location":"file_functions/#save-csv","text":"save_csv(file_name=\"your-file-name.csv\", data=example_list, root_folder=\"/data\", delimiter=\",\", quotechar='\"') Required fields are filename and data (must be a list). Optional Fields: root_folder : By default, the root_dir is \"data\" . The results will be in /data/csv folder, unless root_folder is defined. delimiter : Default is ',', must be a single printable character","title":"Save CSV"},{"location":"file_functions/#quotechar-default-is-must-be-a-single-printable-character","text":"","title":"quotechar: Default is '\"', must be a single printable character"},{"location":"file_functions/#open-csv","text":"open_csv(filename: str, delimit: str = None) Required filed of filename and optional delimiter field (delimit=). Quoting is set to minimal and initial spaces will be skipped (removed). Output result is a dictionary/json object. from dsg_lib.file_functions import save_csv , open_csv data = [[ 'num' , '1' , '2' , '3' ], [ f ' { i } ' , \"a\" , \"b\" , \"c\" ]] save_csv ( filename = \"test.csv\" , datad = data , root_folder = None , delimiter = None , quotechar = None ) result = open_csv ( filename = \"test.csv\" ) print ( result ) Note: Data being sent is a list of lists. Each row in a csv is a list. So construct the data in a similar fashion as such. Otherwise the data will not persist as you expect. data = [] count = 1 header = [ \"column 1\" , \"column 2\" , \"column 3\" , \"column 4\" ] data . append ( header ) for _ in range ( 10 ): row = [ \"this\" , \"is\" , \"row\" , numb ] data . append ( row ) count += 1","title":"Open CSV"},{"location":"file_functions/#create-and-open-a-json-file","text":"save_json(filename: str, data: list, root_folder: str = None) Required fields are filename and data (must be a list). Optional is the root_folder . By default, the root_dir is \"data\" . The results will be in /data/json folder, unless root_folder is defined. open_json(filename: str) Required filed of filename and optional delimiter field (delimit=). Quoting is set to minimal and initial spaces will be skipped (removed). from dsg_lib.file_functions import save_json , open_json json_data = { \"name\" : \"John\" , \"age\" : 30 , \"cars\" : [ \"Ford\" , \"BMW\" , \"Fiat\" ]} save_json ( filename = \"test.json\" , data = json_data , root_folder = \"data\" ) result = open_json ( filename = \"test.json\" ) print ( result )","title":"Create and open a JSON file"},{"location":"file_functions/#create-and-open-a-text-file","text":"save_text(filename: str, data: list, root_folder: str = None) Required fields are filename and data (must be a list). Optional is the root_folder . By default, the root_dir is \"data\" . The results will be in /data/text folder, unless root_folder is defined. open_text(filename: str) Required filed of filename and output is a string. Output result will be in /data/text folder. from dsg_lib.file_functions import save_text , open_text html = \"\"\" <!DOCTYPE html> <html> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html> \"\"\" file_functions . save_text ( filename = \"test.html\" , data = html ) result = open_text ( filename = \"test.json\" ) print ( result )","title":"Create and open a Text file"},{"location":"file_functions/#delete-file","text":"delete_file(file_name: str) Required fields are filename . Based on extension, the file will be removed. If the extension is other than .json or .csv, the file to removed will be removed from the data/text folder. from dsg_lib.file_functions import delete_file delete_file ( filename = \"test.html\" , data = html )","title":"Delete File"},{"location":"folder_functions/","text":"Folder Functions \u00b6 Working on it....","title":"FolderFunctions"},{"location":"folder_functions/#folder-functions","text":"Working on it....","title":"Folder Functions"},{"location":"logging/","text":"Logging Configuration \u00b6 This module uses Loguru 0.5.0 or higher to manage logging. The module will intercept standard logging and add to logging file. TODO: \u00b6 none Configuration \u00b6 Simple zero config from dsg_lib.logging_config import config_log from loguru import logger import logging # no configuration necessary as all have default values that are secure. config_log () # after configuring logging # user loguru to log messages logger . debug ( \"This is a debug message\" ) logger . info ( \"This is an info message\" ) logger . error ( \"This is an error message\" ) logger . warning ( \"This is a warning message\" ) logger . critical ( \"This is a critical message\" ) # will intercept all standard logging messages also logging . debug ( \"This is a debug message\" ) logging . info ( \"This is an info message\" ) logging . error ( \"This is an error message\" ) logging . warning ( \"This is a warning message\" ) logging . critical ( \"This is a critical message\" ) Configuration settings from dsg_lib import logging_config from loguru import logger import logging logging_config . config_log ( logging_directory = \"myLoggingFolder\" , # or None and defaults to logging log_name = \"mylog.log\" , # or None and defaults to \"log.log\" logging_level = \"debug\" , # or \"info\" or \"debug\" or \"warning\" or \"error\" or \"critical\" or None and defaults to \"info\" log_rotation = \"1 MB\" , # or None and default is 10 MB log_retention = \"1 Day\" , # or None and defaults to \"14 Days\" log_backtrace = True , # or None and defaults to False ) # after configuring logging # user loguru to log messages logger . debug ( \"This is a debug message\" ) logger . info ( \"This is an info message\" ) logger . error ( \"This is an error message\" ) logger . warning ( \"This is a warning message\" ) logger . critical ( \"This is a critical message\" ) # will intercept all standard logging messages also logging . debug ( \"This is a debug message\" ) logging . info ( \"This is an info message\" ) logging . error ( \"This is an error message\" ) logging . warning ( \"This is a warning message\" ) logging . critical ( \"This is a critical message\" ) def div_zero ( x , y ): try : return x / y except ZeroDivisionError as e : logger . error ( f \" { e } \" ) logging . error ( f \" { e } \" ) @logger . catch def div_zero_two ( x , y ): return x / y a = div_zero ( x = 1 , y = 0 ) b = div_zero_two ( x = 1 , y = 0 ) Using FastAPI \u00b6 Zero config example. Should run as is. Requires from fastapi import FastAPI from fastapi.responses import RedirectResponse import logging from loguru import logger from dsg_lib. import logging_config logging_config . config_log () app = FastAPI () @app . get ( \"/\" ) async def root (): \"\"\" Root endpoint of API Returns: Redrects to openapi document \"\"\" # redirect to openapi docs logger . info ( \"Redirecting to OpenAPI docs\" ) response = RedirectResponse ( url = \"/docs\" ) return response","title":"Logging"},{"location":"logging/#logging-configuration","text":"This module uses Loguru 0.5.0 or higher to manage logging. The module will intercept standard logging and add to logging file.","title":"Logging Configuration"},{"location":"logging/#todo","text":"none","title":"TODO:"},{"location":"logging/#configuration","text":"Simple zero config from dsg_lib.logging_config import config_log from loguru import logger import logging # no configuration necessary as all have default values that are secure. config_log () # after configuring logging # user loguru to log messages logger . debug ( \"This is a debug message\" ) logger . info ( \"This is an info message\" ) logger . error ( \"This is an error message\" ) logger . warning ( \"This is a warning message\" ) logger . critical ( \"This is a critical message\" ) # will intercept all standard logging messages also logging . debug ( \"This is a debug message\" ) logging . info ( \"This is an info message\" ) logging . error ( \"This is an error message\" ) logging . warning ( \"This is a warning message\" ) logging . critical ( \"This is a critical message\" ) Configuration settings from dsg_lib import logging_config from loguru import logger import logging logging_config . config_log ( logging_directory = \"myLoggingFolder\" , # or None and defaults to logging log_name = \"mylog.log\" , # or None and defaults to \"log.log\" logging_level = \"debug\" , # or \"info\" or \"debug\" or \"warning\" or \"error\" or \"critical\" or None and defaults to \"info\" log_rotation = \"1 MB\" , # or None and default is 10 MB log_retention = \"1 Day\" , # or None and defaults to \"14 Days\" log_backtrace = True , # or None and defaults to False ) # after configuring logging # user loguru to log messages logger . debug ( \"This is a debug message\" ) logger . info ( \"This is an info message\" ) logger . error ( \"This is an error message\" ) logger . warning ( \"This is a warning message\" ) logger . critical ( \"This is a critical message\" ) # will intercept all standard logging messages also logging . debug ( \"This is a debug message\" ) logging . info ( \"This is an info message\" ) logging . error ( \"This is an error message\" ) logging . warning ( \"This is a warning message\" ) logging . critical ( \"This is a critical message\" ) def div_zero ( x , y ): try : return x / y except ZeroDivisionError as e : logger . error ( f \" { e } \" ) logging . error ( f \" { e } \" ) @logger . catch def div_zero_two ( x , y ): return x / y a = div_zero ( x = 1 , y = 0 ) b = div_zero_two ( x = 1 , y = 0 )","title":"Configuration"},{"location":"logging/#using-fastapi","text":"Zero config example. Should run as is. Requires from fastapi import FastAPI from fastapi.responses import RedirectResponse import logging from loguru import logger from dsg_lib. import logging_config logging_config . config_log () app = FastAPI () @app . get ( \"/\" ) async def root (): \"\"\" Root endpoint of API Returns: Redrects to openapi document \"\"\" # redirect to openapi docs logger . info ( \"Redirecting to OpenAPI docs\" ) response = RedirectResponse ( url = \"/docs\" ) return response","title":"Using FastAPI"},{"location":"quickstart/","text":"Quick Start \u00b6 Install \u00b6 pip install devsetgo - lib Simple Use \u00b6 Create Sample Data \u00b6 Result will be in /data/csv and /data/json folders from dsg_lib.file_functions import create_sample_files create_sample_files ( \"test_file\" , sample_size = 1000 ) Create and open a CSV file \u00b6 Result will be in /data/csv folder from dsg_lib.file_functions import save_csv , open_csv data = [[ 'num' , '1' , '2' , '3' ], [ f ' { i } ' , \"a\" , \"b\" , \"c\" ]] save_csv ( \"test.csv\" , data ) result = open_csv ( \"test.csv\" ) print ( result ) Create and open a JSON file \u00b6 Result will be in /data/csv folder from dsg_lib.file_functions import save_json , open_json json_data = { \"name\" : \"John\" , \"age\" : 30 , \"cars\" : [ \"Ford\" , \"BMW\" , \"Fiat\" ]} file_functions . save_json ( \"test.json\" , json_data ) result = open_json ( \"test.json\" ) print ( result ) Create and open a Text file \u00b6 Result will be in /data/text folder from dsg_lib.file_functions import save_text , open_text html = \"\"\" <!DOCTYPE html> <html> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html> \"\"\" file_functions . save_text ( \"test.html\" , html ) result = open_text ( \"test.json\" ) print ( result )","title":"QuickStart"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#install","text":"pip install devsetgo - lib","title":"Install"},{"location":"quickstart/#simple-use","text":"","title":"Simple Use"},{"location":"quickstart/#create-sample-data","text":"Result will be in /data/csv and /data/json folders from dsg_lib.file_functions import create_sample_files create_sample_files ( \"test_file\" , sample_size = 1000 )","title":"Create Sample Data"},{"location":"quickstart/#create-and-open-a-csv-file","text":"Result will be in /data/csv folder from dsg_lib.file_functions import save_csv , open_csv data = [[ 'num' , '1' , '2' , '3' ], [ f ' { i } ' , \"a\" , \"b\" , \"c\" ]] save_csv ( \"test.csv\" , data ) result = open_csv ( \"test.csv\" ) print ( result )","title":"Create and open a CSV file"},{"location":"quickstart/#create-and-open-a-json-file","text":"Result will be in /data/csv folder from dsg_lib.file_functions import save_json , open_json json_data = { \"name\" : \"John\" , \"age\" : 30 , \"cars\" : [ \"Ford\" , \"BMW\" , \"Fiat\" ]} file_functions . save_json ( \"test.json\" , json_data ) result = open_json ( \"test.json\" ) print ( result )","title":"Create and open a JSON file"},{"location":"quickstart/#create-and-open-a-text-file","text":"Result will be in /data/text folder from dsg_lib.file_functions import save_text , open_text html = \"\"\" <!DOCTYPE html> <html> <body> <h1>My First Heading</h1> <p>My first paragraph.</p> </body> </html> \"\"\" file_functions . save_text ( \"test.html\" , html ) result = open_text ( \"test.json\" ) print ( result )","title":"Create and open a Text file"},{"location":"regex/","text":"RegEx Functions \u00b6 TODO: \u00b6 none Get Month \u00b6 pattern_between_two_char(text_string: str,left_characters: str, right_characters: str) -> list: Pass in any valid ASCII Character that is printable (see list below) for left and right characters, plus the text to return patterns between. import pprint from dsg_lib.patterns import pattern_between_two_char pp = pprint . PrettyPrinter ( indent = 4 ) def pattern_find ( left_char : str , right_char : str , text : str ): text = f \" { left_char } found one { right_char } { left_char } found two { right_char } \" data = pattern_between_two_char ( text , left_char , right_char ) pp . pprint ( data ) if __name__ == \"__main__\" : text = \"Lfound oneR Lfound twoR\" left_char = \"L\" right_char = \"R\" pattern_find ( left_char = left_char , right_char = right_char , text = text ) ASCII_LIST = [ \" \", \"!\", '\"\"', \"#\", \"$\", \"%\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"[\", \"\\\", \"]\", \"^\", \"_\", \"`\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"{\", \"|\", \"}\", \"~\", \"\u20ac\", \"\u201a\", \"\u0192\", \"\u201e\", \"\u2026\", \"\u2020\", \"\u2021\", \"\u02c6\", \"\u2030\", \"\u0160\", \"\u2039\", \"\u0152\", \"\u017d\", \"\u2018\", \"\u2019\", \"\u201c\", \"\u201d\", \"\u2022\", \"\u2013\", \"\u2014\", \"\u02dc\", \"\u2122\", \"\u0161\", \"\u203a\", \"\u0153\", \"\u017e\", \"\u0178\", \"\u00a1\", \"\u00a2\", \"\u00a3\", \"\u00a4\", \"\u00a5\", \"\u00a6\", \"\u00a7\", \"\u00a8\", \"\u00a9\", \"\u00aa\", \"\u00ab\", \"\u00ac\", \"\u00ae\", \"\u00af\", \"\u00b0\", \"\u00b1\", \"\u00b2\", \"\u00b3\", \"\u00b4\", \"\u00b5\", \"\u00b6\", \"\u00b7\", \"\u00b8\", \"\u00b9\", \"\u00ba\", \"\u00bb\", \"\u00bc\", \"\u00bd\", \"\u00be\", \"\u00bf\", \"\u00c0\", \"\u00c1\", \"\u00c2\", \"\u00c3\", \"\u00c4\", \"\u00c5\", \"\u00c6\", \"\u00c7\", \"\u00c8\", \"\u00c9\", \"\u00ca\", \"\u00cb\", \"\u00cc\", \"\u00cd\", \"\u00ce\", \"\u00cf\", \"\u00d0\", \"\u00d1\", \"\u00d2\", \"\u00d3\", \"\u00d4\", \"\u00d5\", \"\u00d6\", \"\u00d7\", \"\u00d8\", \"\u00d9\", \"\u00da\", \"\u00db\", \"\u00dc\", \"\u00dd\", \"\u00de\", \"\u00df\", \"\u00e0\", \"\u00e1\", \"\u00e2\", \"\u00e3\", \"\u00e4\", \"\u00e5\", \"\u00e6\", \"\u00e7\", \"\u00e8\", \"\u00e9\", \"\u00ea\", \"\u00eb\", \"\u00ec\", \"\u00ed\", \"\u00ee\", \"\u00ef\", \"\u00f0\", \"\u00f1\", \"\u00f2\", \"\u00f3\", \"\u00f4\", \"\u00f5\", \"\u00f6\", \"\u00f7\", \"\u00f8\", \"\u00f9\", \"\u00fa\", \"\u00fb\", \"\u00fc\", \"\u00fd\", \"\u00fe\", \"\u00ff\", ]","title":"RegExFunctions"},{"location":"regex/#regex-functions","text":"","title":"RegEx Functions"},{"location":"regex/#todo","text":"none","title":"TODO:"},{"location":"regex/#get-month","text":"pattern_between_two_char(text_string: str,left_characters: str, right_characters: str) -> list: Pass in any valid ASCII Character that is printable (see list below) for left and right characters, plus the text to return patterns between. import pprint from dsg_lib.patterns import pattern_between_two_char pp = pprint . PrettyPrinter ( indent = 4 ) def pattern_find ( left_char : str , right_char : str , text : str ): text = f \" { left_char } found one { right_char } { left_char } found two { right_char } \" data = pattern_between_two_char ( text , left_char , right_char ) pp . pprint ( data ) if __name__ == \"__main__\" : text = \"Lfound oneR Lfound twoR\" left_char = \"L\" right_char = \"R\" pattern_find ( left_char = left_char , right_char = right_char , text = text ) ASCII_LIST = [ \" \", \"!\", '\"\"', \"#\", \"$\", \"%\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \"-\", \".\", \"/\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \":\", \";\", \"<\", \"=\", \">\", \"?\", \"@\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"[\", \"\\\", \"]\", \"^\", \"_\", \"`\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"{\", \"|\", \"}\", \"~\", \"\u20ac\", \"\u201a\", \"\u0192\", \"\u201e\", \"\u2026\", \"\u2020\", \"\u2021\", \"\u02c6\", \"\u2030\", \"\u0160\", \"\u2039\", \"\u0152\", \"\u017d\", \"\u2018\", \"\u2019\", \"\u201c\", \"\u201d\", \"\u2022\", \"\u2013\", \"\u2014\", \"\u02dc\", \"\u2122\", \"\u0161\", \"\u203a\", \"\u0153\", \"\u017e\", \"\u0178\", \"\u00a1\", \"\u00a2\", \"\u00a3\", \"\u00a4\", \"\u00a5\", \"\u00a6\", \"\u00a7\", \"\u00a8\", \"\u00a9\", \"\u00aa\", \"\u00ab\", \"\u00ac\", \"\u00ae\", \"\u00af\", \"\u00b0\", \"\u00b1\", \"\u00b2\", \"\u00b3\", \"\u00b4\", \"\u00b5\", \"\u00b6\", \"\u00b7\", \"\u00b8\", \"\u00b9\", \"\u00ba\", \"\u00bb\", \"\u00bc\", \"\u00bd\", \"\u00be\", \"\u00bf\", \"\u00c0\", \"\u00c1\", \"\u00c2\", \"\u00c3\", \"\u00c4\", \"\u00c5\", \"\u00c6\", \"\u00c7\", \"\u00c8\", \"\u00c9\", \"\u00ca\", \"\u00cb\", \"\u00cc\", \"\u00cd\", \"\u00ce\", \"\u00cf\", \"\u00d0\", \"\u00d1\", \"\u00d2\", \"\u00d3\", \"\u00d4\", \"\u00d5\", \"\u00d6\", \"\u00d7\", \"\u00d8\", \"\u00d9\", \"\u00da\", \"\u00db\", \"\u00dc\", \"\u00dd\", \"\u00de\", \"\u00df\", \"\u00e0\", \"\u00e1\", \"\u00e2\", \"\u00e3\", \"\u00e4\", \"\u00e5\", \"\u00e6\", \"\u00e7\", \"\u00e8\", \"\u00e9\", \"\u00ea\", \"\u00eb\", \"\u00ec\", \"\u00ed\", \"\u00ee\", \"\u00ef\", \"\u00f0\", \"\u00f1\", \"\u00f2\", \"\u00f3\", \"\u00f4\", \"\u00f5\", \"\u00f6\", \"\u00f7\", \"\u00f8\", \"\u00f9\", \"\u00fa\", \"\u00fb\", \"\u00fc\", \"\u00fd\", \"\u00fe\", \"\u00ff\", ]","title":"Get Month"}]}