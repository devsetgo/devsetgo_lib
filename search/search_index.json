{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p> <p>CI/CD Pipeline: </p> <p>SonarCloud:  </p>"},{"location":"#devsetgo-common-library","title":"DevSetGo Common Library","text":"<p>A set of common functions wrapped into a package, so I don't have to write the same code over and over. Oh and it makes the code more reusable.... or something like that.</p>"},{"location":"#testing","title":"Testing","text":"<p>Test on Windows and Linux. Since I work in Windows and Linux I test for issues there. Should work on MacOS, but let me know if there is an issue.</p>"},{"location":"#library-functions","title":"Library Functions","text":"<ul> <li> <p>file_functions</p> <ul> <li>CSV File Functions</li> <li>JSON File Functions</li> <li>Text File Functions</li> </ul> </li> <li> <p>Folder Functions</p> <ul> <li>Make Directory</li> <li>Remove Directory</li> <li>Last File Changed</li> <li>Directory List</li> </ul> </li> <li> <p>Calendar Functions</p> <ul> <li>Get Month</li> <li>Get Month Number</li> </ul> </li> <li> <p>Patterns</p> <ul> <li>Pattern Between Two Characters</li> </ul> </li> <li> <p>Logging</p> <ul> <li>logging configuration and interceptor</li> </ul> </li> </ul>"},{"location":"common_functions/","title":"Common Library Functions","text":"<p>Common functions I hate rewriting in every app I work on. So I have create a bunch of reusable functions across file create and save (CSV, JSON, Text), Folder functions, simple calendar functions, and RegEx patterns.</p>"},{"location":"common_functions/#file-functions","title":"File Functions","text":""},{"location":"common_functions/#create-sample-data","title":"Create Sample Data","text":"<p>create_sample_files(filename: str, sample_size: int)</p> <p>Pass in file name without an extension (.json or .csv) and the sample size. The function will create a CSV and JSON file with the resulting files in /data/csv and /data/json folders</p> <pre><code>from dsg_lib.file_functions import create_sample_files\n\ncreate_sample_files(filename=\"test_file\", sample_size=1000)\n</code></pre>"},{"location":"common_functions/#create-and-open-a-csv-file","title":"Create and open a CSV file","text":""},{"location":"common_functions/#save-csv","title":"Save CSV","text":"<p>save_csv(file_name=\"your-file-name.csv\", data=example_list, root_folder=\"/data\", delimiter=\",\", quotechar='\"')</p> <p>Required fields are filename and data (must be a list).</p> <p>Optional Fields:</p> <ul> <li>root_folder: By default, the root_dir is \"data\". The results will be in /data/csv folder, unless root_folder is defined.</li> <li>delimiter: Default is ',', must be a single printable character</li> <li> </li> </ul>"},{"location":"common_functions/#quotechar-default-is-must-be-a-single-printable-character","title":"quotechar: Default is '\"', must be a single printable character","text":""},{"location":"common_functions/#open-csv","title":"Open CSV","text":"<p>open_csv(file_name: str, delimit: str = None, quote_level:str=None, skip_initial_space:bool=True)</p> <p>Required filed of filename and optional delimiter field (delimit=). Quoting is set to minimal and initial spaces will be skipped (removed). Output result is a dictionary/json object.</p> <p>options - file_name: str | \"myfile.csv\" - delimit: str | example - \":\" single character only inside quotes - quote_level:str | [\"none\",\"non-numeric\",\"minimal\",\"all\"] default is minimal - skip_initial_space:bool | default is True</p> <p>See Python documentation as needed https://docs.python.org/3/library/csv.html</p> <pre><code>from dsg_lib.file_functions import save_csv, open_csv\ndata = [['num','1','2','3'],\n        [f'{i}',\"a\",\"b\",\"c\"]]\n\nsave_csv(filename=\"test.csv\", datad=data, root_folder=None, delimiter=None,  quotechar=None)\n\nresult =  open_csv(filename=\"test.csv\", quote_level=\"all\",)\nprint(result)\n</code></pre> <p>Note: Data being sent is a list of lists. Each row in a csv is a list. So construct the data in a similar fashion as such. Otherwise the data will not persist as you expect.</p> <pre><code>data = []\ncount = 1\nheader = [\"column 1\", \"column 2\", \"column 3\", \"column 4\"]\ndata.append(header)\n\nfor _ in range(10):\n    row = [\"this\", \"is\", \"row\", numb]\n    data.append(row)\n    count += 1\n</code></pre>"},{"location":"common_functions/#create-and-open-a-json-file","title":"Create and open a JSON file","text":"<p>save_json(filename: str, data: list, root_folder: str = None)</p> <p>Required fields are filename and data (must be a list). Optional is the root_folder. By default, the root_dir is \"data\". The results will be in /data/json folder, unless root_folder is defined.</p> <p>open_json(filename: str)</p> <p>Required filed of filename and optional delimiter field (delimit=). Quoting is set to minimal and initial spaces will be skipped (removed).</p> <pre><code>from dsg_lib.file_functions import save_json, open_json\n\njson_data = {\"name\": \"John\", \"age\": 30, \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]}\n\nsave_json(filename=\"test.json\",data=json_data, root_folder=\"data\")\n\nresult = open_json(filename=\"test.json\")\nprint(result)\n</code></pre>"},{"location":"common_functions/#create-and-open-a-text-file","title":"Create and open a Text file","text":"<p>save_text(filename: str, data: list, root_folder: str = None)</p> <p>Required fields are filename and data (must be a list). Optional is the root_folder. By default, the root_dir is \"data\". The results will be in /data/text folder, unless root_folder is defined.</p> <p>open_text(filename: str)</p> <p>Required filed of filename and output is a string. Output result will be in /data/text folder.</p> <pre><code>from dsg_lib.file_functions import save_text, open_text\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nfile_functions.save_text(filename=\"test.html\", data=html)\n\nresult = open_text(filename=\"test.json\")\nprint(result)\n</code></pre>"},{"location":"common_functions/#delete-file","title":"Delete File","text":"<p>delete_file(file_name: str)</p> <p>Required fields are filename. Based on extension, the file will be removed. If the extension is other than .json or .csv, the file to removed will be removed from the data/text folder.</p> <pre><code>from dsg_lib.file_functions import delete_file\n\ndelete_file(filename=\"test.html\", data=html)\n</code></pre>"},{"location":"common_functions/#folder-functions","title":"Folder Functions","text":"<p>==================</p>"},{"location":"common_functions/#last_data_files_changed","title":"last_data_files_changed","text":"<p>==================</p> <p>This code defines a function <code>last_data_files_changed</code> which returns the last modified file's modification time and path from the given directory. If an error occurs while finding the last modified file, this function returns None for both modification time and path.</p>"},{"location":"common_functions/#how-to-use","title":"How to Use","text":"<p>To use this function, you need to pass the path of the directory as an argument.</p> <pre><code>from pathlib import Path\nfrom datetime import datetime\nfrom typing import Tuple\nfrom dsg_lib.folder_functions import last_data_files_changed\n\n# provide directory path\ndirectory_path = Path(\"/path/to/directory\")\n\n# call function to get last modified file's modification time and path\nlast_modified_time, last_modified_file_path = last_data_files_changed(directory_path)\n\nif last_modified_time and last_modified_file_path:\n    print(f\"Last modified file in {directory_path} was {last_modified_file_path} modified at {last_modified_time}\")\nelse:\n    print(f\"Error occurred while finding last modified file in {directory_path}\")\n</code></pre>"},{"location":"common_functions/#function-signature","title":"Function Signature","text":"<pre><code>def last_data_files_changed(directory_path: pathlib.Path) -&gt; Tuple[datetime.datetime, pathlib.Path]:\n</code></pre>"},{"location":"common_functions/#input-parameters","title":"Input Parameters","text":"<ul> <li><code>directory_path</code> (pathlib.Path): The directory path to search for the last modified file.</li> </ul>"},{"location":"common_functions/#output-parameters","title":"Output Parameters","text":"<ul> <li><code>Tuple[datetime.datetime, pathlib.Path]</code>: A tuple containing the last modified file's modification time and path, or (None, None) if an error occurs.</li> </ul>"},{"location":"common_functions/#exceptions","title":"Exceptions","text":"<p>If any exception occurs while finding the last modified file, this function logs an error message and returns <code>(None, None)</code>.</p>"},{"location":"common_functions/#example","title":"Example","text":"<pre><code># provide directory path\ndirectory_path = Path(\"/path/to/directory\")\n\n# call function to get last modified file's modification time and path\nlast_modified_time, last_modified_file_path = last_data_files_changed(directory_path)\n\nif last_modified_time and last_modified_file_path:\n    print(f\"Last modified file in {directory_path} was {last_modified_file_path} modified at {last_modified_time}\")\nelse:\n    print(f\"Error occurred while finding last modified file in {directory_path}\")\n</code></pre> <p>This example code snippet will return the last modified file's modification time and path for the given directory path. If any exception occurs, it logs an error message and returns <code>(None, None)</code>.</p> <p>===========================================</p>"},{"location":"common_functions/#get_directory_list","title":"get_directory_list","text":"<p>===========================================</p> <p>This is a Python library function that returns a list of directories in a specified directory. The function takes one argument, the path to the directory to be searched. If the specified directory does not exist, the function raises a FileNotFoundError.</p> <p>To use this function, import it into your Python script, then call it with the path to the directory you want to search. The function returns a list of directories within that directory.</p>"},{"location":"common_functions/#usage","title":"Usage","text":"<pre><code>from pathlib import Path\nfrom dsg_lib.folder_functions import get_directory_list\n\n# Call the function with the path to the directory you want to search\ndir_list = get_directory_list('/path/to/directory')\n\n# Print the list of directories\nprint(dir_list)\n</code></pre>"},{"location":"common_functions/#arguments","title":"Arguments","text":"<ul> <li><code>file_directory</code> (str): The path to the directory to search for directories.</li> </ul>"},{"location":"common_functions/#returns","title":"Returns","text":"<p>The function returns a list of directories in the specified directory.</p>"},{"location":"common_functions/#raises","title":"Raises","text":"<ul> <li><code>FileNotFoundError</code>: If the specified directory does not exist.</li> </ul>"},{"location":"common_functions/#examples","title":"Examples","text":"<pre><code># Import required libraries\nimport logging\nfrom pathlib import Path\nfrom get_directory_list import get_directory_list\n\n# Set the directory to search\ndirectory_path = Path.cwd().joinpath('my_directory')\n\n# Get the list of directories in the specified directory\ndirectory_list = get_directory_list(directory_path)\n\n# Print the list of directories\nprint(directory_list)\n</code></pre> <p>This will output a list of all directories in the specified directory.</p> <p>==============================================================</p>"},{"location":"common_functions/#make_folder","title":"make_folder","text":"<p>==============================================================</p> <p>This is a Python library function that creates a new folder in a specified directory. The function takes one argument, the path to the directory in which to create the new folder. If the specified folder already exists, the function raises a FileExistsError. If the folder name contains invalid characters, the function raises a ValueError.</p> <p>To use this function, import it into your Python script, then call it with the path to the directory in which you want to create the new folder. The function returns a boolean value indicating whether the folder was created successfully.</p>"},{"location":"common_functions/#usage_1","title":"Usage","text":"<pre><code>from pathlib import Path\nfrom dsg_lib.folder_functions import make_folder\n\n# Call the function with the path to the directory in which you want to create the new folder\nfolder_created = make_folder(Path('/path/to/directory/new_folder'))\n\n# Check if the folder was created successfully\nif folder_created:\n    print(\"Folder created successfully!\")\n</code></pre>"},{"location":"common_functions/#arguments_1","title":"Arguments","text":"<ul> <li><code>file_directory</code> (pathlib.Path): The directory in which to create the new folder.</li> </ul>"},{"location":"common_functions/#returns_1","title":"Returns","text":"<p>The function returns a boolean value indicating whether the folder was created successfully.</p>"},{"location":"common_functions/#raises_1","title":"Raises","text":"<ul> <li><code>FileExistsError</code>: If the folder already exists.</li> <li><code>ValueError</code>: If the folder name contains invalid characters.</li> </ul>"},{"location":"common_functions/#examples_1","title":"Examples","text":"<pre><code># Import required libraries\nimport logging\nfrom pathlib import Path\nfrom dsg_lib.folder_functions import make_folder\n\n# Set the directory in which to create the new folder\ndirectory_path = Path.cwd().joinpath('my_directory')\n\n# Set the name of the new folder to create\nnew_folder_name = 'new_folder'\n\n# Create the path to the new folder\nnew_folder_path = directory_path.joinpath(new_folder_name)\n\n# Create the new folder\nmake_folder(new_folder_path)\n\n# Log a message indicating that the new folder was created successfully\nlogging.info(f\"New folder created: {new_folder_path}\")\n</code></pre> <p>This will create a new folder named \"new_folder\" within the \"my_directory\" directory. If the new folder is created successfully, the function will log a message indicating that the new folder was created.</p> <p>================================================================</p>"},{"location":"common_functions/#remove_folder","title":"remove_folder","text":"<p>================================================================</p> <p>This is a Python library function that removes a folder from a specified directory. The function takes one argument, the path to the directory containing the folder to be removed. If the specified directory does not exist, the function raises a FileNotFoundError. If the folder could not be removed, the function raises an OSError.</p> <p>To use this function, import it into your Python script, then call it with the path to the directory containing the folder to be removed. The function does not return any values.</p>"},{"location":"common_functions/#usage_2","title":"Usage","text":"<pre><code>from dsg_lib.folder_functions import remove_folder\n\n# Call the function with the path to the directory containing the folder to be removed\nremove_folder('/path/to/directory/folder_to_remove')\n</code></pre>"},{"location":"common_functions/#arguments_2","title":"Arguments","text":"<ul> <li><code>file_directory</code> (str): The directory containing the folder to be removed.</li> </ul>"},{"location":"common_functions/#returns_2","title":"Returns","text":"<p>The function does not return any values.</p>"},{"location":"common_functions/#raises_2","title":"Raises","text":"<ul> <li><code>FileNotFoundError</code>: If the specified directory does not exist.</li> <li><code>OSError</code>: If the folder could not be removed.</li> </ul>"},{"location":"common_functions/#examples_2","title":"Examples","text":"<pre><code># Import required libraries\nimport logging\nfrom pathlib import Path\nfrom dsg_lib.folder_functions import remove_folder\n\n# Set the path to the folder to be removed\nfolder_to_remove = Path.cwd().joinpath('my_directory', 'folder_to_remove')\n\n# Remove the folder\nremove_folder(folder_to_remove)\n\n# Log a message indicating that the folder was removed successfully\nlogging.info(f\"Folder removed: {folder_to_remove}\")\n</code></pre> <p>This will remove the folder named \"folder_to_remove\" from the \"my_directory\" directory. If the folder is removed successfully, the function will log a message indicating that the folder was removed.</p>"},{"location":"common_functions/#regex-functions","title":"RegEx Functions","text":"<p>=================</p>"},{"location":"common_functions/#pattern_between_two_char","title":"pattern_between_two_char","text":"<p>=================</p> <p>DSG_Lib.Patterns is a Python module that provides a function to search for a pattern between two characters in a given string.</p>"},{"location":"common_functions/#usage_3","title":"Usage","text":""},{"location":"common_functions/#pattern_between_two_chartext_string-str-left_characters-str-right_characters-str-dict","title":"<code>pattern_between_two_char(text_string: str, left_characters: str, right_characters: str) -&gt; dict</code>","text":"<p>This function searches for a pattern between two characters in a given string.</p>"},{"location":"common_functions/#parameters","title":"Parameters","text":"<ul> <li><code>text_string</code> (str): The string in which the pattern is searched.</li> <li><code>left_characters</code> (str): The left character used to specify the beginning of the pattern.</li> <li><code>right_characters</code> (str): The right character used to specify the end of the pattern.</li> </ul>"},{"location":"common_functions/#returns_3","title":"Returns","text":"<p>This function returns a dictionary with the following keys:</p> <ul> <li><code>found</code> (list): A list of all patterns found.</li> <li><code>matched_found</code> (int): The number of patterns found.</li> <li><code>pattern_parameters</code> (dict): A dictionary with the following keys:<ul> <li><code>left_character</code> (str): The left character used to specify the beginning of the pattern.</li> <li><code>right_character</code> (str): The right character used to specify the end of the pattern.</li> <li><code>regex_pattern</code> (str): The regular expression pattern used to find the pattern.</li> <li><code>text_string</code> (str): The string in which the pattern is searched.</li> </ul> </li> </ul> <p>If an error occurs during the search, the function returns a dictionary with the following keys:</p> <ul> <li><code>Error</code> (str): The error message.</li> <li><code>matched_found</code> (int): 0.</li> <li><code>pattern_parameters</code> (dict): A dictionary with the following keys:<ul> <li><code>left_character</code> (str): The left character used to specify the beginning of the pattern.</li> <li><code>right_character</code> (str): The right character used to specify the end of the pattern.</li> <li><code>regex_pattern</code> (str): None.</li> <li><code>text_string</code> (str): The string in which the pattern is searched.</li> </ul> </li> </ul>"},{"location":"common_functions/#example_1","title":"Example","text":"<pre><code>import dsg_lib.patterns as patterns\n\ntext = \"Hello &lt;world&gt;! Goodbye &lt;world&gt;!\"\nleft = \"&lt;\"\nright = \"&gt;\"\n\nresult = patterns.pattern_between_two_char(text, left, right)\n\nprint(result)\n</code></pre> <p>Output:</p> <pre><code>{\n    \"found\": [\"world\", \"world\"],\n    \"matched_found\": 2,\n    \"pattern_parameters\": {\n        \"left_character\": \"\\&lt;\",\n        \"right_character\": \"\\&gt;\",\n        \"regex_pattern\": \"\\&lt;(.+?)\\&gt;+?\",\n        \"text_string\": \"Hello \\&lt;world\\&gt;! Goodbye \\&lt;world\\&gt;!\"\n    }\n}\n</code></pre>"},{"location":"common_functions/#calendar-functions","title":"Calendar Functions","text":""},{"location":"common_functions/#import","title":"Import","text":"<pre><code># Import the function\nfrom dsg_lib.calendar_functions import get_month,get_month_number\n</code></pre> <p>============================================</p>"},{"location":"common_functions/#get_month-function","title":"get_month() function","text":"<p>============================================</p> <p>This function takes an integer <code>month</code> number between 1 and 12 and returns the corresponding month name as a string. If the input is not within the range of 1-12, it returns an \"Invalid month number\" error message.</p>"},{"location":"common_functions/#parameters_1","title":"Parameters","text":""},{"location":"common_functions/#month-int","title":"month: int","text":"<p>An integer between 1 and 12 representing the month number.</p>"},{"location":"common_functions/#returns_4","title":"Returns","text":"<p>The full name of the month corresponding to the input <code>month</code> number as a string. If the input is not within the range of 1-12, it returns an \"Invalid month number\" error message.</p>"},{"location":"common_functions/#example-usage","title":"Example usage","text":"<pre><code># Call the function with a valid input\nmonth_name = get_month(4)\nprint(month_name) # Output: April\n\n# Call the function with an invalid input\nmonth_name = get_month(15)\nprint(month_name) # Output: Invalid month number\n</code></pre> <p>============================================</p>"},{"location":"common_functions/#get_month_number-function","title":"get_month_number() function","text":"<p>============================================</p> <p>This code defines a function <code>get_month_number()</code> that takes a month name as a string and returns the corresponding month number as an integer.</p>"},{"location":"common_functions/#usage_4","title":"Usage","text":""},{"location":"common_functions/#function-signature_1","title":"Function Signature","text":"<pre><code>def get_month_number(month_name: str) -&gt; int:\n</code></pre>"},{"location":"common_functions/#inputs","title":"Inputs","text":"<ul> <li><code>month_name</code> (str): A string containing the full name of a month.</li> </ul>"},{"location":"common_functions/#outputs","title":"Outputs","text":"<ul> <li>(int): The month number corresponding to the input month name.</li> <li>Returns -1 if the input is not a valid month name.</li> </ul>"},{"location":"common_functions/#example_2","title":"Example","text":"<pre><code>&gt;&gt;&gt; get_month_number(\"January\")\n1\n&gt;&gt;&gt; get_month_number(\"january\")\n1\n&gt;&gt;&gt; get_month_number(\"february\")\n2\n&gt;&gt;&gt; get_month_number(\"foo\")\n-1\n</code></pre>"},{"location":"common_functions/#implementation-details","title":"Implementation details","text":"<p>The function first creates a dictionary <code>month_dict</code> which maps month names to month numbers. It then sets up logging using the Python <code>logging</code> module.</p> <p>If the input <code>month_name</code> is not a string, the function logs an error and returns -1. Otherwise, the function converts the input string to title case and removes any leading/trailing spaces. If the input <code>month_name</code> is a valid key in the dictionary, the function returns the corresponding month number. If the input <code>month_name</code> is not a valid key in the dictionary, the function logs an error and returns -1.</p>"},{"location":"contribute/","title":"Contributing","text":"<p>Please feel to contribute to this project. Adding common functions is the intent and if you have one to add or improve an existing it is greatly appreciated.</p>"},{"location":"contribute/#ways-to-contribute","title":"Ways to Contribute!","text":"<ul> <li>Add or improve a function</li> <li>Add or improve documentation</li> <li>Add or improve Tests</li> <li>Report or fix a bug</li> </ul>"},{"location":"full_library_example/","title":"Full Example","text":"<pre><code># -*- coding: utf-8 -*-\nimport logging\nimport secrets\nfrom contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\nfrom loguru import logger\nfrom tqdm import tqdm\n\nfrom dsg_lib import logging_config\n\nlogging_config.config_log(\n    logging_level=\"Debug\", log_serializer=False, log_name=\"log.log\"\n)\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    logger.info(\"starting up\")\n    # Create the tables in the database\n    await async_db.create_tables()\n\n    create_users = True\n    if create_users:\n        await create_a_bunch_of_users(single_entry=23, many_entries=100)\n    yield\n    logger.info(\"shutting down\")\n\n\n# Create an instance of the FastAPI class\napp = FastAPI(\n    title=\"FastAPI Example\",  # The title of the API\n    description=\"This is an example of a FastAPI application using the DevSetGo Toolkit.\",  # A brief description of the API\n    version=\"0.1.0\",  # The version of the API\n    docs_url=\"/docs\",  # The URL where the API documentation will be served\n    redoc_url=\"/redoc\",  # The URL where the ReDoc documentation will be served\n    openapi_url=\"/openapi.json\",  # The URL where the OpenAPI schema will be served\n    debug=True,  # Enable debug mode\n    middleware=[],  # A list of middleware to include in the application\n    routes=[],  # A list of routes to include in the application\n    lifespan=lifespan,\n)\n\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"\n    Root endpoint of API\n    Returns:\n        Redrects to openapi document\n    \"\"\"\n    # redirect to openapi docs\n    logger.info(\"Redirecting to OpenAPI docs\")\n    response = RedirectResponse(url=\"/docs\")\n    return response\n\n\nfrom dsg_lib.fastapi_endpoints import (  # , system_tools_endpoints\n    system_health_endpoints,\n)\n\nconfig_health = {\n    \"enable_status_endpoint\": True,\n    \"enable_uptime_endpoint\": True,\n    \"enable_heapdump_endpoint\": True,\n}\napp.include_router(\n    system_health_endpoints.create_health_router(config=config_health),\n    prefix=\"/api/health\",\n    tags=[\"system-health\"],\n)\n\n\nfrom sqlalchemy import Column, Delete, Select, String, Update\n\nfrom dsg_lib.database import (\n    async_database,\n    base_schema,\n    database_config,\n    database_operations,\n)\n\n# Create a DBConfig instance\nconfig = {\n    # \"database_uri\": \"postgresql+asyncpg://postgres:postgres@postgresdb/postgres\",\n    \"database_uri\": \"sqlite+aiosqlite:///:memory:?cache=shared\",\n    \"echo\": False,\n    \"future\": True,\n    # \"pool_pre_ping\": True,\n    # \"pool_size\": 10,\n    # \"max_overflow\": 10,\n    \"pool_recycle\": 3600,\n    # \"pool_timeout\": 30,\n}\n\ndb_config = database_config.DBConfig(config)\n# Create an AsyncDatabase instance\nasync_db = async_database.AsyncDatabase(db_config)\n\n# Create a DatabaseOperations instance\ndb_ops = database_operations.DatabaseOperations(async_db)\n\n\n# User class inherits from SchemaBase and async_db.Base\n# This class represents the User table in the database\nclass User(base_schema.SchemaBase, async_db.Base):\n    __tablename__ = \"users\"  # Name of the table in the database\n\n    # Define the columns of the table\n    first_name = Column(String, unique=False, index=True)  # First name of the user\n    last_name = Column(String, unique=False, index=True)  # Last name of the user\n    email = Column(\n        String, unique=True, index=True, nullable=True\n    )  # Email of the user, must be unique\n\n\nfrom sqlalchemy import ForeignKey, Integer\nfrom sqlalchemy.orm import relationship\n\n\nclass Address(base_schema.SchemaBase, async_db.Base):\n    __tablename__ = \"addresses\"  # Name of the table in the database\n\n    # Define the columns of the table\n    street = Column(String, unique=False, index=True)  # Street of the address\n    city = Column(String, unique=False, index=True)  # City of the address\n    zip = Column(String, unique=False, index=True)  # Zip code of the address\n\n    # Define the parent relationship to the User class\n    user_id = Column(Integer, ForeignKey(\"users.pkid\"))  # Foreign key to the User table\n    user = relationship(\n        \"User\", back_populates=\"addresses\"\n    )  # Relationship to the User class\n\n\n# Update the User class to include the child relationship to the Address class\nUser.addresses = relationship(\"Address\", order_by=Address.pkid, back_populates=\"user\")\n\n\nasync def create_a_bunch_of_users(single_entry=0, many_entries=0):\n    logger.info(f\"single_entry: {single_entry}\")\n    await async_db.create_tables()\n    # Create a list to hold the user data\n\n    # Create a loop to generate user data\n\n    for i in tqdm(range(single_entry), desc=\"executing one\"):\n        value = secrets.token_hex(16)\n        user = User(\n            first_name=f\"First{value}\",\n            last_name=f\"Last{value}\",\n            email=f\"user{value}@example.com\",\n        )\n        logger.info(f\"created_users: {user}\")\n        await db_ops.create_one(user)\n\n    users = []\n    # Create a loop to generate user data\n    for i in tqdm(range(many_entries), desc=\"executing many\"):\n        value_one = secrets.token_hex(4)\n        value_two = secrets.token_hex(8)\n        user = User(\n            first_name=f\"First{value_one}{i}{value_two}\",\n            last_name=f\"Last{value_one}{i}{value_two}\",\n            email=f\"user{value_one}{i}{value_two}@example.com\",\n        )\n        logger.info(f\"created_users: {user.first_name}\")\n        users.append(user)\n\n    # Use db_ops to add the users to the database\n    await db_ops.create_many(users)\n\n\n@app.get(\"/database/get-count\")\nasync def get_count():\n    count = await db_ops.count_query(Select(User))\n    return {\"count\": count}\n\n\n# endpoint to get list of user\n@app.get(\"/database/get-all\")\nasync def get_all(offset: int = 0, limit: int = 100):\n    records = await db_ops.read_query(Select(User).offset(offset).limit(limit))\n    return {\"records\": records}\n\n\n@app.get(\"/database/get-primary-key\")\nasync def table_primary_key():\n    pk = await db_ops.get_primary_keys(User)\n    return {\"pk\": pk}\n\n\n@app.get(\"/database/get-column-details\")\nasync def table_column_details():\n    columns = await db_ops.get_columns_details(User)\n    return {\"columns\": columns}\n\n\n@app.get(\"/database/get-tables\")\nasync def table_table_details():\n    tables = await db_ops.get_table_names()\n    return {\"table_names\": tables}\n\n\n@app.get(\"/database/get-one-record\")\nasync def get_one_record(record_id: str):\n    record = await db_ops.get_one_record(Select(User).where(User.pkid == record_id))\n    return {\"record\": record}\n</code></pre>"},{"location":"http_codes/","title":"HTTP Codes Module","text":"<p>Welcome to the <code>dsg_lib.fastapi_endpoints.http_codes</code> module. This module is a part of the <code>dsg_lib</code> library, designed to streamline and enhance your experience with the FastAPI framework.</p> <p>The <code>http_codes</code> module provides a set of constants representing HTTP status codes. These constants are designed to be used in FastAPI endpoints, making your code more readable and maintainable by replacing hard-coded status code numbers with meaningful constant names.</p> <p>Whether you are building a simple API or a complex web application, the <code>http_codes</code> module can help you ensure that your endpoints return the correct HTTP status codes. This not only improves the clarity of your code, but also helps to ensure that your API behaves in a way that is consistent with HTTP standards.</p> <p>In the following sections, we will guide you on how to import and use this module, along with examples to illustrate its usage in various scenarios. Whether you are a beginner or an experienced developer, we hope this documentation will be a valuable resource as you work with the <code>dsg_lib.fastapi_endpoints.http_codes</code> module.</p>"},{"location":"http_codes/#using-the-module","title":"Using the Module","text":"<p>The <code>http_codes</code> module provides constants for HTTP status codes. These constants can be used in FastAPI endpoints to set the HTTP status code of the response.</p> <p>Here are examples of how to use the <code>http_codes</code> constants in FastAPI endpoints:</p> <pre><code>from fastapi import FastAPI\nfrom dsg_lib.fastapi_endpoints import http_codes\n\napp = FastAPI()\n\n# Create your own list of codes\ncustom_response = generate_code_dict([400, 405, 500], description_only=False)\n\n\n# GET endpoint\n@app.get(\"/items/{item_id}\",responses=custom_response) # could also use http_codes.GET_CODES\nasync def read_item(item_id: int):\n    # ... get the item ...\n    return {\"item\": item, \"code\": http_codes.HTTP_200_OK}\n\n# POST endpoint\n@app.post(\"/items/\",responses=http_codes.POST_CODES)\nasync def create_item(item: Item):\n    # ... create the item ...\n    return {\"item\": item, \"code\": http_codes.HTTP_201_CREATED}\n\n# PUT endpoint\n@app.put(\"/items/{item_id}\",responses=http_codes.PUT_CODES)\nasync def update_item(item_id: int, item: Item):\n    # ... update the item ...\n    return {\"item\": item, \"code\": http_codes.HTTP_200_OK}\n\n# DELETE endpoint\n@app.delete(\"/items/{item_id}\",responses=http_codes.DELETE_CODES)\nasync def delete_item(item_id: int):\n    # ... delete the item ...\n    return {\"code\": http_codes.HTTP_204_NO_CONTENT}\n</code></pre> <p>In these examples, the <code>http_codes</code> constants are used to set the HTTP status code of the response. The <code>HTTP_200_OK</code> constant is used for successful GET and PUT requests, the <code>HTTP_201_CREATED</code> constant is used for successful POST requests, and the <code>HTTP_204_NO_CONTENT</code> constant is used for successful DELETE requests.</p> <p>Please note that you need to replace <code>Item</code> with your actual item model and implement the logic for getting, creating, updating, and deleting items.</p>"},{"location":"logging/","title":"Logging Configuration","text":"<p>This module uses Loguru 0.6.0 or higher to manage logging.</p> <p>===================================================</p>"},{"location":"logging/#todo","title":"TODO:","text":""},{"location":"logging/#-none","title":"- none","text":"<p>===================================================</p>"},{"location":"logging/#introduction-to-logging-config","title":"Introduction to Logging Config:","text":"<p>=================================================== The <code>dsg_lib.logging_config</code> library code provides a configuration and interceptor for standard python logging using the <code>loguru</code> package. This library allows developers to customize logging options and create a more efficient logging system. This user documentation explains the configuration options and how to use the library code.</p> <p>===================================================</p>"},{"location":"logging/#usage","title":"Usage:","text":"<p>To use the <code>dsg_lib.logging_config</code> library code, first, you need to import it in your Python script as follows:</p> <pre><code>from dsg_lib.logging_config import config_log\n</code></pre> <p>Then, you can call the <code>config_log()</code> function with the desired parameters to configure the logging system. The following parameters are available:</p> <ul> <li>logging_directory: str = \"log\",  # directory where log file will be stored</li> <li>log_name: str = \"log.json\",  # name of the log file</li> <li>logging_level: str = \"INFO\",  # level of logging</li> <li>log_rotation: str = \"10 MB\",  # size at which log file should be rotated</li> <li>log_retention: str = \"30 days\",  # how long logging data should be retained</li> <li>log_backtrace: bool = False,  # whether backtraces should be logged</li> <li>log_format: str = \"'time': '{time:YYYY-MM-DD HH:mm:ss.SSSSSS}', 'level': '{level: &lt;8}', 'name': '{name}', 'function': '{function}', 'line': '{line}', 'message': '{message}',\",  # format of log messages</li> <li>log_serializer: bool = True,  # whether the log should be serialized</li> <li>log_diagnose: bool = False,  # whether to show logging diagnostics</li> <li>app_name: str = None,  # name of the application being logged</li> <li>append_app_name: bool = False,  # whether to append the application name to the log file name</li> <li>append_trace_id: bool = False,  # whether to append a trace ID to the log file name</li> <li>enable_trace_id: bool = False,  # whether to enable tracing for the log file</li> </ul> <p>===================================================</p>"},{"location":"logging/#example","title":"Example:","text":"<p>Below is the base configuration and can be called with just <code>config_log()</code></p> <pre><code>from dsg_lib.logging_config import config_log\n\nconfig_log(\n    logging_directory: str = \"log\",  # directory where log file will be stored\n    log_name: str = \"log.json\",  # name of the log file\n    logging_level: str = \"INFO\",  # level of logging\n    log_rotation: str = \"10 MB\",  # size at which log file should be rotated\n    log_retention: str = \"30 days\",  # how long logging data should be retained\n    log_backtrace: bool = False,  # whether backtraces should be logged\n    log_format: str = \"'time': '{time:YYYY-MM-DD HH:mm:ss.SSSSSS}', 'level': '{level: &lt;8}', 'name': '{name}', 'function': '{function}', 'line': '{line}', 'message': '{message}',\",  # format of log messages\n    log_serializer: bool = True,  # whether the log should be serialized\n    log_diagnose: bool = False,  # whether to show logging diagnostics\n    app_name: str = None,  # name of the application being logged\n    append_app_name: bool = False,  # whether to append the application name to the log file name\n    append_trace_id: bool = False,  # whether to append a trace ID to the log file name\n    enable_trace_id: bool = False,  # whether to enable tracing for the log file\n)\n</code></pre> <p>This will configure the logging system to use the following options:</p> <ul> <li>Logging directory: <code>\"logs\"</code></li> <li>Log name: <code>\"myapp_myapp_12345.log\"</code></li> <li>Logging level: <code>\"DEBUG\"</code></li> <li>Log rotation: <code>\"1 GB\"</code></li> <li>Log retention: <code>\"60 days\"</code></li> <li>Log backtrace: <code>True</code></li> <li>Log format: <code>\"{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message} | app_name=myapp | service_id=12345\"</code></li> <li>Log serializer: <code>True</code></li> <li>Log diagnose: <code>True</code></li> <li>Application name: <code>\"myapp\"</code></li> <li>Append application name: <code>True</code></li> <li>Service ID: <code>\"12345\"</code></li> <li>Append service ID: <code>True</code></li> </ul> <p>===================================================</p>"},{"location":"logging/#intercepting-standard-logging","title":"Intercepting standard logging:","text":"<p>The <code>dsg_lib.logging_config</code> library code also includes an interceptor for standard python logging. This allows you to capture all log messages sent through the standard python logging module and redirect them to the loguru logger.</p> <p>To use the interceptor, you don't need to do anything special. It is automatically added when you call the <code>config_log()</code> function.</p> <p>===================================================</p>"},{"location":"logging/#conclusion","title":"Conclusion:","text":"<p>In summary, the <code>dsg_lib.logging_config</code> library code provides an easy-to-use configuration and interceptor for standard python logging using the <code>loguru</code> package. The library allows you to customize the logging options to fit your needs and capture all log messages sent through the standard python logging module.</p>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#install","title":"Install","text":"<pre><code>pip install devsetgo-lib\n</code></pre>"},{"location":"quickstart/#simple-use","title":"Simple Use","text":""},{"location":"quickstart/#create-sample-data","title":"Create Sample Data","text":"<p>Result will be in /data/csv and /data/json folders</p> <pre><code>from dsg_lib.file_functions import create_sample_files\n\ncreate_sample_files(\"test_file\", sample_size=1000)\n</code></pre>"},{"location":"quickstart/#create-and-open-a-csv-file","title":"Create and open a CSV file","text":"<p>Result will be in /data/csv folder</p> <pre><code>from dsg_lib.file_functions import save_csv, open_csv\ndata = [['num','1','2','3'],\n        [f'{i}',\"a\",\"b\",\"c\"]]\n\nsave_csv(\"test.csv\", data)\n\nresult =  open_csv(\"test.csv\")\nprint(result)\n</code></pre>"},{"location":"quickstart/#create-and-open-a-json-file","title":"Create and open a JSON file","text":"<p>Result will be in /data/csv folder</p> <pre><code>from dsg_lib.file_functions import save_json, open_json\n\njson_data = {\"name\": \"John\", \"age\": 30, \"cars\": [\"Ford\", \"BMW\", \"Fiat\"]}\n    file_functions.save_json(\"test.json\",json_data)\n\nresult = open_json(\"test.json\")\nprint(result)\n</code></pre>"},{"location":"quickstart/#create-and-open-a-text-file","title":"Create and open a Text file","text":"<p>Result will be in /data/text folder</p> <pre><code>from dsg_lib.file_functions import save_text, open_text\n\nhtml = \"\"\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\nfile_functions.save_text(\"test.html\", html)\n\nresult = open_text(\"test.json\")\nprint(result)\n</code></pre>"},{"location":"release-notes/","title":"Release Notes\\n\\n","text":""}]}