name: Upload Python Package

on:
  workflow_dispatch:
  release:
    types: [published]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for mike to work properly
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools build mike
        pip install -r requirements.txt
    - name: Build package
      run: python -m build
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  deploy-docs:
    name: Deploy versioned documentation
    runs-on: ubuntu-latest
    needs: deploy  # Wait for PyPI deployment to complete
    permissions:
      contents: write  # Required for pushing to gh-pages
      pages: write     # Required for GitHub Pages
      id-token: write  # Required for GitHub Pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for mike to work properly

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mike

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Git configuration:"
          git config --list | grep user
          echo "Current branch:"
          git branch -a
          echo "Recent commits:"
          git log --oneline -5

      - name: Get release version
        id: get_version
        run: |
          # Get version from GitHub release tag
          RAW_VERSION=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present
          VERSION=${RAW_VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Raw version from tag: $RAW_VERSION"
          echo "Cleaned version: $VERSION"

      - name: Prepare documentation files
        run: |
          python3 scripts/update_docs.py
          python3 scripts/changelog.py
          cp README.md docs/index.md
          cp CONTRIBUTING.md docs/contribute.md
          cp CHANGELOG.md docs/release-notes.md
          echo "Documentation files prepared"

      - name: Check mike setup
        run: |
          echo "Mike version:"
          mike --version
          echo "Existing documentation versions:"
          mike list || echo "No existing versions found (this is normal for first deployment)"
          echo "Git remote:"
          git remote -v
          echo "Available branches:"
          git branch -r
          echo "Check if gh-pages branch exists:"
          git show-branch remotes/origin/gh-pages 2>/dev/null || echo "gh-pages branch does not exist yet"

      - name: Deploy documentation with mike
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Deploying documentation for version: $VERSION"

          # Check if version is valid
          if [ -z "$VERSION" ] || [ "$VERSION" = "refs/tags/" ]; then
            echo "Error: Invalid version detected: '$VERSION'"
            echo "GITHUB_REF was: $GITHUB_REF"
            exit 1
          fi

          # Try to deploy with push first
          echo "Attempting to deploy and push documentation..."
          if python3 scripts/deploy_docs.py deploy \
            --version "$VERSION" \
            --aliases latest stable \
            --title "Release $VERSION" \
            --push; then
            echo "Documentation deployed and pushed successfully for version $VERSION"
          else
            echo "Failed to deploy with push, trying local deployment only..."
            # Fallback: deploy locally without pushing
            python3 scripts/deploy_docs.py deploy \
              --version "$VERSION" \
              --aliases latest stable \
              --title "Release $VERSION"

            echo "Local deployment successful, attempting manual push..."
            # Manual push attempt
            if git push origin gh-pages; then
              echo "Manual push successful"
            else
              echo "Manual push failed, but local deployment completed"
              exit 1
            fi
          fi
